{
	"info": {
		"_postman_id": "3e767c3c-87d7-4bc9-b61e-d0250b507049",
		"name": "BookingAPITesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37161733",
		"_collection_link": "https://www.postman.com/ffvhv0/workspace/32589771-1b13-4cc9-ae0a-bb02299aeae7/collection/37161733-3e767c3c-87d7-4bc9-b61e-d0250b507049?action=share&source=collection_link&creator=37161733"
	},
	"item": [
		{
			"name": "Create Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Check status code\r",
							"pm.test(\"Status code is 200\",()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"// Check token field\r",
							"pm.test(\"Token is generated\",()=> {\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"    pm.expect(jsonData.token).to.not.eql(null);\r",
							"})\r",
							"\r",
							"// Store token in collection variable\r",
							"pm.collectionVariables.set(\"token\", jsonData.token);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}auth",
					"host": [
						"{{baseURL}}auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking Ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Request Array is not empty\", () => {\r",
							"    pm.expect(responseData).to.have.length.above(0);\r",
							"})\r",
							"\r",
							"pm.test(\"Response Array contains unique id\", () => {\r",
							"    let ids = responseData.map(item => item.bookingid);\r",
							"    let id_set = new Set(ids);\r",
							"    pm.expect(id_set.size).to.equal(ids.length);\r",
							"})\r",
							"\r",
							"pm.test(\"Each ID should be number\", () => {\r",
							"    responseData.forEach(item => {\r",
							"        pm.expect(item.bookingid).to.be.a('number');\r",
							"    })\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}booking",
					"host": [
						"{{baseURL}}booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking by ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"id\",\"1\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\",()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response schema is valid\",()=> {\r",
							"    pm.expect(schema).to.not.be.undefined;\r",
							"    pm.expect(responseData).to.be.jsonSchema(schema);\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}booking/{{id}}",
					"host": [
						"{{baseURL}}booking"
					],
					"path": [
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"bookingid\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"booking\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"firstname\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"lastname\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"totalprice\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"depositpaid\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"bookingdates\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"checkin\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"checkout\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"checkin\",\r",
							"            \"checkout\"\r",
							"          ]\r",
							"        },\r",
							"        \"additionalneeds\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"firstname\",\r",
							"        \"lastname\",\r",
							"        \"totalprice\",\r",
							"        \"depositpaid\",\r",
							"        \"bookingdates\",\r",
							"        \"additionalneeds\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"bookingid\",\r",
							"    \"booking\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let responseData = pm.response.json(); // Parse the response body as JSON\r",
							"\r",
							"pm.test(\"Response body is valid\",()=>{\r",
							"    pm.expect(responseData).to.be.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"pm.test(\"Booking ID is not null\", function () {\r",
							"    pm.expect(responseData.bookingid).to.not.be.null;\r",
							"})\r",
							"\r",
							"let intBookingId = parseInt(responseData.bookingid);\r",
							"pm.collectionVariables.set(\"bookingId\", intBookingId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Tejas\",\r\n    \"lastname\" : \"Bansal\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-01-01\",\r\n        \"checkout\" : \"2025-01-08\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}booking",
					"host": [
						"{{baseURL}}booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get created Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\",()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response schema is valid\",()=> {\r",
							"    pm.expect(schema).to.not.be.undefined;\r",
							"    pm.expect(responseData).to.be.jsonSchema(schema);\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}booking/{{bookingId}}",
					"host": [
						"{{baseURL}}booking"
					],
					"path": [
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200\",()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is valid JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"    let responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Tejas\",\r\n    \"lastname\" : \"Bansal\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-01-01\",\r\n        \"checkout\" : \"2025-01-10\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}booking/{{bookingId}}",
					"host": [
						"{{baseURL}}booking"
					],
					"path": [
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\",()=>{\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"Content-type is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
							"})\r",
							"\r",
							"pm.collectionVariables.unset(\"bookingId\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"skipCollectionTests\", true);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"description": "\n",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}booking/{{bookingId}}",
					"host": [
						"{{baseURL}}booking"
					],
					"path": [
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\",()=>{\r",
							"    pm.response.to.have.status(201) // 201 Created\r",
							"})\r",
							"\r",
							"pm.test(\"Content-type is text/plain\",()=>{\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"skipCollectionTests\", true);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}ping",
					"host": [
						"{{baseURL}}ping"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Content-Type is present\", function () {\r",
					"    pm.response.to.have.header(\"Content-Type\");\r",
					"});\r",
					"\r",
					"if (!pm.variables.get(\"skipCollectionTests\")){\r",
					"pm.test(\"Content-type is application/json\",()=>{\r",
					"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
					"})\r",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "default"
		},
		{
			"key": "baseURL",
			"value": "https://restful-booker.herokuapp.com/",
			"type": "string"
		}
	]
}